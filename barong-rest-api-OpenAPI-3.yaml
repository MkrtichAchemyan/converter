openapi: 3.0.1
info:
  title: Barong
  description: RESTful API for barong OAuth server
  version: 2.0.30-alpha
servers:
  - url: '//localhost:3000/api/v2/*/'
tags:
  - name: admin
    description: Operations about admins
  - name: identity
    description: Operations about identities
  - name: resource
    description: Operations about resources
paths:
  /admin/levels:
    get:
      tags:
        - admin
      description: Returns array of permissions as paginated collection
      operationId: getAdminLevels
      responses:
        '200':
          description: Returns array of permissions as paginated collection
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/profiles:
    get:
      tags:
        - admin
      description: Return all profiles
      operationId: getAdminProfiles
      parameters:
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of profiles per page (defaults to 100, maximum is 100).'
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Return all profiles
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    put:
      tags:
        - admin
      description: Update a profile for user
      operationId: putAdminProfiles
      requestBody:
        content:
          application/json:
            schema:
              required:
                - uid
              properties:
                uid:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                dob:
                  type: string
                  format: date
                address:
                  type: string
                postcode:
                  type: string
                city:
                  type: string
                country:
                  type: string
                metadata:
                  type: string
                  description: 'Any additional key: value pairs in json string format'
        required: true
      responses:
        '200':
          description: Update a profile for user
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
    delete:
      tags:
        - admin
      description: Delete a profile for user
      operationId: deleteAdminProfiles
      parameters:
        - name: uid
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Delete a profile for user
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /admin/restrictions:
    get:
      tags:
        - admin
      description: Returns array of restrictions as a paginated collection
      operationId: getAdminRestrictions
      parameters:
        - name: scope
          in: query
          schema:
            type: string
            enum:
              - continent
              - country
              - ip
              - ip_subnet
        - name: range
          in: query
          schema:
            type: string
            default: created
        - name: from
          in: query
          schema:
            type: string
        - name: to
          in: query
          schema:
            type: string
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of restrictions per page (defaults to 100, maximum is 1000).'
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Returns array of restrictions as a paginated collection
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    put:
      tags:
        - admin
      description: Update restriction
      operationId: putAdminRestrictions
      requestBody:
        content:
          application/json:
            schema:
              required:
                - id
              properties:
                id:
                  type: integer
                  description: Restriction id
                  format: int32
                scope:
                  type: string
                  enum:
                    - continent
                    - country
                    - ip
                    - ip_subnet
                value:
                  type: string
                state:
                  type: string
                  enum:
                    - enabled
                    - disabled
        required: true
      responses:
        '200':
          description: Update restriction
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    post:
      tags:
        - admin
      description: Create restriction
      operationId: postAdminRestrictions
      requestBody:
        content:
          application/json:
            schema:
              required:
                - scope
                - value
              properties:
                scope:
                  type: string
                  enum:
                    - continent
                    - country
                    - ip
                    - ip_subnet
                value:
                  type: string
                state:
                  type: string
                  default: enabled
                  enum:
                    - enabled
                    - disabled
        required: true
      responses:
        '201':
          description: Create restriction
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    delete:
      tags:
        - admin
      description: Delete restriction
      operationId: deleteAdminRestrictions
      parameters:
        - name: id
          in: query
          description: Restriction id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Delete restriction
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/metrics:
    get:
      tags:
        - admin
      description: Returns main statistic in the given time period
      operationId: getAdminMetrics
      parameters:
        - name: created_from
          in: query
          schema:
            type: string
        - name: created_to
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Returns main statistic in the given time period
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/activities/admin:
    get:
      tags:
        - admin
      description: Returns array of activities as paginated collection
      operationId: getAdminActivitiesAdmin
      parameters:
        - name: topic
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            type: string
        - name: uid
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: target_uid
          in: query
          schema:
            type: string
        - name: range
          in: query
          schema:
            type: string
            default: created
        - name: from
          in: query
          schema:
            type: string
        - name: to
          in: query
          schema:
            type: string
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of users per page (defaults to 100, maximum is 100).'
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Returns array of activities as paginated collection
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/activities:
    get:
      tags:
        - admin
      description: Returns array of activities as paginated collection
      operationId: getAdminActivities
      parameters:
        - name: topic
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            type: string
        - name: uid
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: from
          in: query
          schema:
            type: string
        - name: to
          in: query
          schema:
            type: string
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of users per page (defaults to 100, maximum is 100).'
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Returns array of activities as paginated collection
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/permissions:
    get:
      tags:
        - admin
      description: Returns array of permissions as paginated collection
      operationId: getAdminPermissions
      parameters:
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of users per page (defaults to 100, maximum is 100).'
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Returns array of permissions as paginated collection
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    put:
      tags:
        - admin
      description: Update Permission
      operationId: putAdminPermissions
      requestBody:
        content:
          application/json:
            schema:
              required:
                - id
              properties:
                id:
                  type: integer
                  description: Permission id
                  format: int32
                role:
                  type: string
                  description: permission field - role
                verb:
                  type: string
                  description: permission field - request verb
                path:
                  type: string
                  description: permission field - request path
                action:
                  type: string
        required: true
      responses:
        '200':
          description: Update Permission
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    post:
      tags:
        - admin
      description: Create permission
      operationId: postAdminPermissions
      requestBody:
        content:
          application/json:
            schema:
              required:
                - action
                - path
                - role
                - verb
              properties:
                role:
                  type: string
                verb:
                  type: string
                path:
                  type: string
                action:
                  type: string
        required: true
      responses:
        '201':
          description: Create permission
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    delete:
      tags:
        - admin
      description: Deletes permission
      operationId: deleteAdminPermissions
      parameters:
        - name: id
          in: query
          description: permission id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Deletes permission
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  '/admin/users/{uid}':
    get:
      tags:
        - admin
      description: Returns user info
      operationId: getAdminUsersUid
      parameters:
        - name: uid
          in: path
          description: user uniq id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns user info
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/users/labels:
    get:
      tags:
        - admin
      description: Returns array of users as paginated collection
      operationId: getAdminUsersLabels
      parameters:
        - name: key
          in: query
          description: Label key
          required: true
          schema:
            type: string
        - name: value
          in: query
          description: Label value
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of users per page (defaults to 100, maximum is 1000).'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Returns array of users as paginated collection
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    put:
      tags:
        - admin
      description: Update user label scope
      operationId: putAdminUsersLabels
      requestBody:
        content:
          application/json:
            schema:
              required:
                - key
                - scope
                - uid
                - value
              properties:
                uid:
                  type: string
                  description: user uniq id
                key:
                  type: string
                  description: Label key.
                scope:
                  type: string
                  description: >-
                    label key. [a-z0-9_-]+ should be used. Min - 3, max - 255
                    characters.
                value:
                  type: string
                  description: Label value.
        required: true
      responses:
        '200':
          description: Update user label scope
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
    post:
      tags:
        - admin
      description: Adds label for user
      operationId: postAdminUsersLabels
      requestBody:
        content:
          application/json:
            schema:
              required:
                - key
                - uid
                - value
              properties:
                uid:
                  type: string
                  description: user uniq id
                key:
                  type: string
                  description: >-
                    label key. [a-z0-9_-]+ should be used. Min - 3, max - 255
                    characters.
                value:
                  type: string
                  description: >-
                    label value. [A-Za-z0-9_-] should be used. Min - 3, max -
                    255 characters.
                scope:
                  type: string
                  description: 'Label scope: ''public'' or ''private''. Default is public'
        required: true
      responses:
        '201':
          description: Adds label for user
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    delete:
      tags:
        - admin
      description: Deletes label for user
      operationId: deleteAdminUsersLabels
      parameters:
        - name: uid
          in: query
          description: user uniq id
          required: true
          schema:
            type: string
        - name: key
          in: query
          description: >-
            label key. [a-z0-9_-]+ should be used. Min - 3, max - 255
            characters.
          required: true
          schema:
            type: string
        - name: scope
          in: query
          description: >-
            label key. [a-z0-9_-]+ should be used. Min - 3, max - 255
            characters.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deletes label for user
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/users/labels/update:
    post:
      tags:
        - admin
      description: Update user label value
      operationId: postAdminUsersLabelsUpdate
      requestBody:
        content:
          application/json:
            schema:
              required:
                - key
                - scope
                - uid
                - value
              properties:
                uid:
                  type: string
                  description: user uniq id
                key:
                  type: string
                  description: Label key.
                scope:
                  type: string
                  description: >-
                    label key. [a-z0-9_-]+ should be used. Min - 3, max - 255
                    characters.
                value:
                  type: string
                  description: Label value.
                replace:
                  type: boolean
                  description: When true label will be created if not exist
                  default: true
        required: true
      responses:
        '201':
          description: Update user label value
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /admin/users/labels/list:
    get:
      tags:
        - admin
      description: Returns existing labels keys and values
      operationId: getAdminUsersLabelsList
      responses:
        '200':
          description: Returns existing labels keys and values
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/users/documents/pending:
    get:
      tags:
        - admin
      description: Returns array of users with pending documents as paginated collection
      operationId: getAdminUsersDocumentsPending
      parameters:
        - name: extended
          in: query
          description: When true endpoint returns full information about users
          schema:
            type: boolean
        - name: uid
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
        - name: first_name
          in: query
          schema:
            type: string
        - name: last_name
          in: query
          schema:
            type: string
        - name: country
          in: query
          schema:
            type: string
        - name: level
          in: query
          schema:
            type: integer
            format: int32
        - name: state
          in: query
          schema:
            type: string
        - name: range
          in: query
          schema:
            type: string
            default: created
        - name: from
          in: query
          schema:
            type: string
        - name: to
          in: query
          schema:
            type: string
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of users per page (defaults to 100, maximum is 1000).'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: >-
            Returns array of users with pending documents as paginated
            collection
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/users:
    get:
      tags:
        - admin
      description: Returns array of users as paginated collection
      operationId: getAdminUsers
      parameters:
        - name: extended
          in: query
          description: When true endpoint returns full information about users
          schema:
            type: boolean
        - name: uid
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
        - name: first_name
          in: query
          schema:
            type: string
        - name: last_name
          in: query
          schema:
            type: string
        - name: country
          in: query
          schema:
            type: string
        - name: level
          in: query
          schema:
            type: integer
            format: int32
        - name: state
          in: query
          schema:
            type: string
        - name: range
          in: query
          schema:
            type: string
            default: created
        - name: from
          in: query
          schema:
            type: string
        - name: to
          in: query
          schema:
            type: string
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of users per page (defaults to 100, maximum is 100).'
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Returns array of users as paginated collection
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    put:
      tags:
        - admin
      description: Update user attributes
      operationId: putAdminUsers
      requestBody:
        content:
          application/json:
            schema:
              required:
                - uid
              properties:
                uid:
                  type: string
                  description: user uniq id
                state:
                  type: string
                  description: user state
                otp:
                  type: boolean
                  description: user 2fa status
        required: true
      responses:
        '200':
          description: Update user attributes
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/users/role:
    post:
      tags:
        - admin
      description: Update user role
      operationId: postAdminUsersRole
      requestBody:
        content:
          application/json:
            schema:
              required:
                - role
                - uid
              properties:
                uid:
                  type: string
                  description: user uniq id
                role:
                  type: string
                  description: user role
        required: true
      responses:
        '201':
          description: Update user role
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /admin/users/update:
    post:
      tags:
        - admin
      description: Update user attributes
      operationId: postAdminUsersUpdate
      requestBody:
        content:
          application/json:
            schema:
              required:
                - uid
              properties:
                uid:
                  type: string
                  description: user uniq id
                state:
                  type: string
                  description: user state
                otp:
                  type: boolean
                  description: user 2fa status
        required: true
      responses:
        '201':
          description: Update user attributes
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /identity/users/password/confirm_code:
    post:
      tags:
        - identity
      description: Sets new account password
      operationId: postIdentityUsersPasswordConfirmCode
      requestBody:
        content:
          application/json:
            schema:
              required:
                - confirm_password
                - password
                - reset_password_token
              properties:
                reset_password_token:
                  type: string
                  description: Token from email
                password:
                  type: string
                  description: User password
                confirm_password:
                  type: string
                  description: User password
                lang:
                  type: string
                  description: Language in iso-2 format
        required: true
      responses:
        '201':
          description: Resets password
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '404':
          description: Record is not found
          content: {}
        '422':
          description: Validation errors
          content: {}
  /identity/users/password/generate_code:
    post:
      tags:
        - identity
      description: Send password reset instructions
      operationId: postIdentityUsersPasswordGenerateCode
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
                  description: Account email
                lang:
                  type: string
                  description: Language in iso-2 format
        required: true
      responses:
        '201':
          description: Generated password reset code
          content: {}
        '400':
          description: Required params are missing
          content: {}
        '404':
          description: User doesn't exist
          content: {}
        '422':
          description: Validation errors
          content: {}
  /identity/users/email/confirm_code:
    post:
      tags:
        - identity
      description: Confirms an account
      operationId: postIdentityUsersEmailConfirmCode
      requestBody:
        content:
          application/json:
            schema:
              required:
                - token
              properties:
                token:
                  type: string
                  description: Token from email
                lang:
                  type: string
                  description: Language in iso-2 format
        required: true
      responses:
        '201':
          description: Confirms an account
          content: {}
        '400':
          description: Required params are missing
          content: {}
        '422':
          description: Validation errors
          content: {}
  /identity/users/email/generate_code:
    post:
      tags:
        - identity
      description: Send confirmations instructions
      operationId: postIdentityUsersEmailGenerateCode
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
                  description: Account email
                lang:
                  type: string
                  description: Client env language
        required: true
      responses:
        '201':
          description: Generated verification code
          content: {}
        '400':
          description: Required params are missing
          content: {}
        '422':
          description: Validation errors
          content: {}
  /identity/users/register_geetest:
    get:
      tags:
        - identity
      description: Register Geetest captcha
      operationId: getIdentityUsersRegisterGeetest
      responses:
        '200':
          description: Register Geetest captcha
          content: {}
  /identity/users:
    post:
      tags:
        - identity
      description: Creates new user
      operationId: postIdentityUsers
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: User Email
                password:
                  type: string
                  description: User Password
                refid:
                  type: string
                  description: Referral uid
                lang:
                  type: string
                  description: Client env language
                captcha_response:
                  type: string
                  description: Response from captcha widget
                data:
                  type: string
                  description: 'Any additional key: value pairs in json string format'
        required: true
      responses:
        '201':
          description: Creates new user
          content: {}
        '400':
          description: Required params are missing
          content: {}
        '422':
          description: Validation errors
          content: {}
  /identity/sessions:
    post:
      tags:
        - identity
      description: Start a new session
      operationId: postIdentitySessions
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                captcha_response:
                  type: string
                  description: Response from captcha widget
                otp_code:
                  type: string
                  description: Code from Google Authenticator
        required: true
      responses:
        '201':
          description: Start a new session
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '404':
          description: Record is not found
          content: {}
    delete:
      tags:
        - identity
      description: Destroy current session
      operationId: deleteIdentitySessions
      responses:
        '204':
          description: Destroy current session
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '404':
          description: Record is not found
          content: {}
  /identity/version:
    get:
      tags:
        - identity
      description: Get barong version
      operationId: getIdentityVersion
      responses:
        '200':
          description: Get barong version
          content: {}
  /identity/time:
    get:
      tags:
        - identity
      description: Get server current unix timestamp.
      operationId: getIdentityTime
      responses:
        '200':
          description: Get server current unix timestamp.
          content: {}
  /identity/ping:
    get:
      tags:
        - identity
      description: Test connectivity
      operationId: getIdentityPing
      responses:
        '200':
          description: Test connectivity
          content: {}
  /resource/api_keys:
    get:
      tags:
        - resource
      description: List all api keys for current account.
      operationId: getResourceApiKeys
      parameters:
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of api keys per page (defaults to 100, maximum is 1000).'
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: List all api keys for current account.
          content: {}
        '400':
          description: Require 2FA and totp code
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    post:
      tags:
        - resource
      description: Create an api key
      operationId: postResourceApiKeys
      requestBody:
        content:
          application/json:
            schema:
              required:
                - algorithm
                - totp_code
              properties:
                algorithm:
                  type: string
                kid:
                  type: string
                scope:
                  type: string
                  description: comma separated scopes
                totp_code:
                  type: string
                  description: Code from Google Authenticator
        required: true
      responses:
        '201':
          description: Create an api key
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  '/resource/api_keys/{kid}':
    delete:
      tags:
        - resource
      description: Delete an api key
      operationId: deleteResourceApiKeysKid
      parameters:
        - name: kid
          in: path
          required: true
          schema:
            type: string
        - name: totp_code
          in: query
          description: Code from Google Authenticator
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Succefully deleted
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
      security:
        - BearerToken: []
    patch:
      tags:
        - resource
      description: Updates an api key
      operationId: patchResourceApiKeysKid
      parameters:
        - name: kid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - totp_code
              properties:
                scope:
                  type: string
                  description: comma separated scopes
                state:
                  type: string
                  description: >-
                    State of API Key. "active" state means key is active and can
                    be used for auth
                totp_code:
                  type: string
                  description: Code from Google Authenticator
        required: true
      responses:
        '200':
          description: Updates an api key
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/otp/verify:
    post:
      tags:
        - resource
      description: Verify 2FA code
      operationId: postResourceOtpVerify
      requestBody:
        content:
          application/json:
            schema:
              required:
                - code
              properties:
                code:
                  type: string
                  description: Code from Google Authenticator
        required: true
      responses:
        '201':
          description: Verify 2FA code
          content: {}
        '400':
          description: 2FA has not been enabled for this account or code is missing
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/otp/disable:
    post:
      tags:
        - resource
      description: Disable 2FA
      operationId: postResourceOtpDisable
      requestBody:
        content:
          application/json:
            schema:
              required:
                - code
              properties:
                code:
                  type: string
                  description: Code from Google Authenticator
        required: true
      responses:
        '201':
          description: Disable 2FA
          content: {}
        '400':
          description: 2FA has not been enabled for this account or code is missing
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/otp/enable:
    post:
      tags:
        - resource
      description: Enable 2FA
      operationId: postResourceOtpEnable
      requestBody:
        content:
          application/json:
            schema:
              required:
                - code
              properties:
                code:
                  type: string
                  description: Code from Google Authenticator
        required: true
      responses:
        '201':
          description: Enable 2FA
          content: {}
        '400':
          description: 2FA has been enabled for this account or code is missing
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/otp/generate_qrcode:
    post:
      tags:
        - resource
      description: Generate qr code for 2FA
      operationId: postResourceOtpGenerateQrcode
      responses:
        '201':
          description: Generate qr code for 2FA
          content: {}
        '400':
          description: 2FA has been enabled for this account
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
  /resource/phones/verify:
    post:
      tags:
        - resource
      description: Verify a phone
      operationId: postResourcePhonesVerify
      requestBody:
        content:
          application/json:
            schema:
              required:
                - phone_number
                - verification_code
              properties:
                phone_number:
                  type: string
                  description: Phone number with country code
                verification_code:
                  type: string
                  description: Verification code from sms
        required: true
      responses:
        '201':
          description: Verify a phone
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
      security:
        - BearerToken: []
  /resource/phones/send_code:
    post:
      tags:
        - resource
      description: Resend activation code
      operationId: postResourcePhonesSendCode
      requestBody:
        content:
          application/json:
            schema:
              required:
                - phone_number
              properties:
                phone_number:
                  type: string
                  description: Phone number with country code
                channel:
                  type: string
                  description: The verification method to use
                  default: sms
                  enum:
                    - call
                    - sms
        required: true
      responses:
        '201':
          description: Resend activation code
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/phones:
    get:
      tags:
        - resource
      description: Returns list of user's phones
      operationId: getResourcePhones
      responses:
        '200':
          description: Returns list of user's phones
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    post:
      tags:
        - resource
      description: Add new phone
      operationId: postResourcePhones
      requestBody:
        content:
          application/json:
            schema:
              required:
                - phone_number
              properties:
                phone_number:
                  type: string
                  description: Phone number with country code
                channel:
                  type: string
                  description: The verification method to use
                  default: sms
                  enum:
                    - call
                    - sms
        required: true
      responses:
        '201':
          description: Add new phone
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/documents:
    get:
      tags:
        - resource
      description: Return current user documents list
      operationId: getResourceDocuments
      responses:
        '200':
          description: Return current user documents list
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    post:
      tags:
        - resource
      description: Upload a new document for current user
      operationId: postResourceDocuments
      requestBody:
        content:
          application/json:
            schema:
              required:
                - doc_number
                - doc_type
                - upload
              properties:
                doc_type:
                  type: string
                  description: Document type
                doc_number:
                  type: string
                  description: Document number
                upload:
                  type: string
                  description: 'Array of Rack::Multipart::UploadedFile'
                doc_expire:
                  type: string
                  description: Document expiration date
                  format: date
                metadata:
                  type: string
                  description: 'Any additional key: value pairs in json string format'
        required: true
      responses:
        '201':
          description: Document is uploaded
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/profiles:
    put:
      tags:
        - resource
      description: Update a profile for current_user
      operationId: putResourceProfiles
      requestBody:
        content:
          application/json:
            schema:
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                dob:
                  type: string
                  format: date
                address:
                  type: string
                postcode:
                  type: string
                city:
                  type: string
                country:
                  type: string
                metadata:
                  type: string
                  description: 'Any additional key: value pairs in json string format'
      responses:
        '200':
          description: Update a profile for current_user
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
    post:
      tags:
        - resource
      description: Create a profile for current_user
      operationId: postResourceProfiles
      requestBody:
        content:
          application/json:
            schema:
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                dob:
                  type: string
                  format: date
                address:
                  type: string
                postcode:
                  type: string
                city:
                  type: string
                country:
                  type: string
                metadata:
                  type: string
                  description: 'Any additional key: value pairs in json string format'
      responses:
        '201':
          description: Create a profile for current_user
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '409':
          description: Profile already exists
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/profiles/me:
    get:
      tags:
        - resource
      description: Return profile of current resource owner
      operationId: getResourceProfilesMe
      responses:
        '200':
          description: Return profile of current resource owner
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: User has no profile
          content: {}
      security:
        - BearerToken: []
  '/resource/labels/{key}':
    get:
      tags:
        - resource
      description: Return a label by key.
      operationId: getResourceLabelsKey
      parameters:
        - name: key
          in: path
          description: Label key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Return a label by key.
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
      security:
        - BearerToken: []
    delete:
      tags:
        - resource
      description: Delete a label  with 'public' scope.
      operationId: deleteResourceLabelsKey
      parameters:
        - name: key
          in: path
          description: Label key.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Succefully deleted
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
      security:
        - BearerToken: []
    patch:
      tags:
        - resource
      description: Update a label with 'public' scope.
      operationId: patchResourceLabelsKey
      parameters:
        - name: key
          in: path
          description: Label key.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - value
              properties:
                value:
                  type: string
                  description: Label value.
        required: true
      responses:
        '200':
          description: Update a label with 'public' scope.
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '404':
          description: Record is not found
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/labels:
    get:
      tags:
        - resource
      description: List all labels for current user.
      operationId: getResourceLabels
      responses:
        '200':
          description: List all labels for current user.
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
      security:
        - BearerToken: []
    post:
      tags:
        - resource
      description: Create a label with 'public' scope.
      operationId: postResourceLabels
      requestBody:
        content:
          application/json:
            schema:
              required:
                - key
                - value
              properties:
                key:
                  type: string
                  description: Label key.
                value:
                  type: string
                  description: Label value.
        required: true
      responses:
        '201':
          description: Create a label with 'public' scope.
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '401':
          description: Invalid bearer token
          content: {}
        '422':
          description: Validation errors
          content: {}
      security:
        - BearerToken: []
  /resource/users/password:
    put:
      tags:
        - resource
      description: Sets new account password
      operationId: putResourceUsersPassword
      requestBody:
        content:
          application/json:
            schema:
              required:
                - confirm_password
                - new_password
                - old_password
              properties:
                old_password:
                  type: string
                  description: Previous account password
                new_password:
                  type: string
                  description: User password
                confirm_password:
                  type: string
                  description: User password
                lang:
                  type: string
                  description: Language in iso-2 format
        required: true
      responses:
        '201':
          description: Changes password
          content: {}
        '400':
          description: Required params are empty
          content: {}
        '404':
          description: Record is not found
          content: {}
        '422':
          description: Validation errors
          content: {}
  '/resource/users/activity/{topic}':
    get:
      tags:
        - resource
      description: Returns user activity
      operationId: getResourceUsersActivityTopic
      parameters:
        - name: page
          in: query
          description: Page number (defaults to 1).
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: 'Number of activity per page (defaults to 100, maximum is 1000).'
          schema:
            type: integer
            format: int32
            default: 100
        - name: topic
          in: path
          description: 'Topic of user activity. Allowed: [all, password, session, otp]'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns user activity
          content: {}
  /resource/users/me:
    get:
      tags:
        - resource
      description: Returns current user
      operationId: getResourceUsersMe
      responses:
        '200':
          description: Returns current user
          content: {}
    delete:
      tags:
        - resource
      description: Returns current user
      operationId: deleteResourceUsersMe
      parameters:
        - name: password
          in: query
          description: Account password
          required: true
          schema:
            type: string
        - name: otp_code
          in: query
          description: Code from Google Authenticator
          schema:
            type: string
      responses:
        '204':
          description: Returns current user
          content: {}
components:
  schemas:
    Level:
      type: object
      properties:
        id:
          type: integer
          description: 'Level identifier, level number'
          format: int32
        key:
          type: string
          description: >-
            Label key. [A-Za-z0-9_-] should be used. Min - 3, max - 255
            characters.
        value:
          type: string
          description: >-
            Label value. [A-Za-z0-9_-] should be used. Min - 3, max - 255
            characters.
    Label:
      type: object
      properties:
        key:
          type: string
          description: >-
            Label key. [a-z0-9_-]+ should be used. Min - 3, max - 255
            characters.
        value:
          type: string
          description: >-
            Label value. [A-Za-z0-9_-] should be used. Min - 3, max - 255
            characters.
        scope:
          type: string
          description: 'Label scope: ''public'' or ''private'''
        created_at:
          type: string
        updated_at:
          type: string
    APIKey:
      type: object
      properties:
        kid:
          type: string
          description: jwt public key
        algorithm:
          type: string
          description: cryptographic hash function type
        scope:
          type: string
          description: serialized array of scopes
        state:
          type: string
          description: active/non-active state of key
        secret:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    Profile:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        dob:
          type: string
          description: Birthday date
          format: date
        address:
          type: string
        postcode:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
        metadata:
          type: object
          properties: {}
          description: Profile additional fields
    User:
      type: object
      properties:
        email:
          type: string
        uid:
          type: string
        role:
          type: string
        level:
          type: integer
          format: int32
        otp:
          type: boolean
          description: is 2FA enabled for account
        state:
          type: string
        referral_uid:
          type: string
          description: UID of referrer
        data:
          type: string
          description: additional phone and profile info
    UserWithProfile:
      type: object
      properties:
        email:
          type: string
        uid:
          type: string
        role:
          type: string
        level:
          type: integer
          format: int32
        otp:
          type: boolean
          description: is 2FA enabled for account
        state:
          type: string
        data:
          type: string
          description: additional phone and profile info
        profile:
          $ref: '#/components/schemas/Profile'
        referral_uid:
          type: string
          description: UID of referrer
        created_at:
          type: string
        updated_at:
          type: string
    UserWithKYC:
      type: object
      properties:
        email:
          type: string
        uid:
          type: string
        role:
          type: string
        level:
          type: integer
          format: int32
        otp:
          type: boolean
        state:
          type: string
        data:
          type: string
          description: additional phone and profile info
        profile:
          $ref: '#/components/schemas/Profile'
        labels:
          $ref: '#/components/schemas/Label'
        phones:
          $ref: '#/components/schemas/Phone'
        documents:
          $ref: '#/components/schemas/Document'
        referral_uid:
          type: string
          description: UID of referrer
        created_at:
          type: string
        updated_at:
          type: string
    Phone:
      type: object
      properties:
        country:
          type: string
        number:
          type: string
    Document:
      type: object
      properties:
        upload:
          type: string
          description: file url
        doc_type:
          type: string
          description: 'document type: passport, driver license'
        doc_number:
          type: string
          description: 'document number: AB123123 type'
        doc_expire:
          type: string
          description: expire date of uploaded documents
        metadata:
          type: string
          description: any additional stored data
        created_at:
          type: string
        updated_at:
          type: string
    UserWithFullInfo:
      type: object
      properties:
        email:
          type: string
        uid:
          type: string
        role:
          type: string
        level:
          type: integer
          format: int32
        otp:
          type: boolean
        state:
          type: string
        referral_uid:
          type: string
          description: UID of referrer
        data:
          type: string
          description: additional phone and profile info
        created_at:
          type: string
        updated_at:
          type: string
        labels:
          $ref: '#/components/schemas/Label'
        phones:
          $ref: '#/components/schemas/Phone'
        profile:
          $ref: '#/components/schemas/Profile'
    Activity:
      type: object
      properties:
        user_ip:
          type: string
        user_agent:
          type: string
        topic:
          type: string
        action:
          type: string
        result:
          type: string
        data:
          type: string
        created_at:
          type: string
